using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEulerPractice.Exercises
{
    internal class Problem2
    {
        //Problem 2: Even Fibonacci Numbers

        //Each new term in the Fibonacci sequence is generated by adding the previous two terms.By starting with 1 and 2, the first 10 terms will be:

        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

        //fiboEvenSum(10) should return a number.
        //Your function should return an even value.
        //Your function should sum the even-valued Fibonacci numbers: fiboEvenSum(8) should return 10.
        //fiboEvenSum(10) should return 10.
        //fiboEvenSum(34) should return 44.
        //fiboEvenSum(60) should return 44.
        //fiboEvenSum(1000) should return 798.
        //fiboEvenSum(100000) should return 60696.
        //fiboEvenSum(4000000) should return 4613732.

        private List<int> _sequence;
        private int _sum = 0;

        public void FiboEvenSum(int number)
        {
            _sequence = new List<int>() { 1, 2 };
            _sum = 0;

            //get fibonacci sequence up to 'number' times
            GetSequence(number);

            //sum up even numbers
            GetEvenSum();

            Console.WriteLine(_sum);
        }

        public void Execute()
        {
            FiboEvenSum(10);
            FiboEvenSum(34);
            FiboEvenSum(60);
            FiboEvenSum(1000);
            FiboEvenSum(100000);
            FiboEvenSum(4000000);
        }

        private void GetEvenSum()
        {
            foreach (var number in _sequence)
            {
                if (number % 2 == 0)
                {
                    _sum += number;
                }
            }
        }

        private void GetSequence(int number)
        {
            var currentNumber = 2;
            var previousNumber = 1;

            //current number + previous number = newNumber
            while (currentNumber+previousNumber <= number)
            {
                var newNumber = currentNumber + previousNumber;
                _sequence.Add(newNumber);

                previousNumber = currentNumber;
                currentNumber = newNumber;
            }
        }
    }
}
